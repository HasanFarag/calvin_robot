<?xml version="1.0"?>
<robot
  xmlns:xacro="http://ros.org/wiki/xacro"
  xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
  xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
  name="calvin">

  <xacro:include filename="$(find uos_common_urdf)/urdf/imu.gazebo.urdf.xacro" />
  <xacro:property name="imu_stdev" value="0.00017" />

  <xacro:include filename="$(find volksbot_driver)/urdf/volksbot.urdf.xacro" />
  <xacro:include filename="$(find uos_common_urdf)/common.xacro" />

  <property name="kinect_x_offset" value="0.07" />
  <property name="kinect_y_offset" value="-0.02" />
  <property name="kinect_z_offset" value="0.0" />

  <xacro:property name="pole_length" value="0.02"/>
  <xacro:property name="pole_width" value="0.02"/>
  <xacro:property name="pole_height" value="1"/>

  <xacro:property name="cup_radius" value="0.045"/>
  <xacro:property name="cup_height" value="0.02"/>

  <xacro:property name="structure_length" value="0.36"/>
  <xacro:property name="structure_width" value="0.32"/>
  <xacro:property name="structure_height" value="0.51"/>

  <xacro:property name="item_width" value="0.02"/>

  <xacro:property name="webcam_pitch_link_length" value="0.082"/>
  <xacro:property name="webcam_pitch_link_width" value="0.095"/>
  <xacro:property name="webcam_pitch_link_height" value="0.02"/>
  <xacro:property name="webcam_z_offset" value="0.412"/>

  <xacro:property name="kinect_pitch_link_length" value="0.08"/>
  <xacro:property name="kinect_pitch_link_width" value="0.17"/>
  <xacro:property name="kinect_pitch_link_height" value="0.02"/>
  <xacro:property name="kinect_pitch_link_z_offset" value="0.46"/>

  <link name="structure">
    <visual>
      <geometry>
        <!--<box size="${structure_length} ${structure_width} ${structure_height}" />-->
        <mesh filename="package://calvin_description/meshes/item-structure.stl"/>
      </geometry>
      <material name="grey" >
        <color rgba="0.5 0.5 0.5 1" />
      </material>
    </visual>
    <collision>
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <!--<box size="${structure_length} ${structure_width} ${structure_height}" />-->
        <mesh filename="package://calvin_description/meshes/item-structure.stl"/>
      </geometry>
    </collision>
    <xacro:box_inertial x="${structure_length}" y="${structure_width}" z="${structure_height}" mass="2"/>
  </link>

  <joint name="top_to_structure" type="fixed">
    <parent link="base_top" />
    <child link="structure" />
    <origin xyz="${base_link_length/2 - structure_length/2 - item_width} 0 ${structure_height/2}" rpy="0 0 0" />
  </joint>

  <link name="imu" />

  <joint name="structure_to_imu_joint" type="fixed">
    <parent link="base_top" />
    <child link="imu" />
    <origin xyz="-0.165 0.135 0" rpy="${M_PI} 0 ${M_PI}" />
  </joint>

  <link name="pole">
    <visual>
      <geometry>
        <!--<box size="${pole_length} ${pole_width} ${pole_height}" />-->
        <mesh filename="package://calvin_description/meshes/item-pole.stl"/>
      </geometry>
      <material name="grey" >
        <color rgba="0.5 0.5 0.5 1" />
      </material>
    </visual>
    <collision>
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <!--<box size="${pole_length} ${pole_width} ${pole_height}" />-->
        <mesh filename="package://calvin_description/meshes/item-pole.stl"/>
      </geometry>
    </collision>
    <xacro:box_inertial x="${pole_length}" y="${pole_width}" z="${pole_height}" mass="0.25"/>
  </link>

  <joint name="structure_to_pole_joint" type="fixed">
    <parent link="structure" />
    <child link="pole" />
    <origin xyz="${-structure_length/2 - pole_length/2} 0 ${pole_height/2 + structure_height/2}" rpy="0 0 0" />
  </joint>

  <link name="cup">
    <visual>
      <geometry>
        <!--<cylinder length="${cup_height}" radius="${cup_radius}" />-->
        <mesh filename="package://calvin_description/meshes/cup.stl"/>
      </geometry>
      <material name="grey" >
        <color rgba="0.5 0.5 0.5 1" />
      </material>
    </visual>
    <collision>
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <!--<cylinder length="${cup_height}" radius="${cup_radius}" />-->
        <mesh filename="package://calvin_description/meshes/cup.stl"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial radius="${cup_radius}" length="${cup_height}" mass="0.05"/>
  </link>

  <joint name="structure_to_cup_joint" type="fixed">
    <parent link="structure" />
    <child link="cup" />
    <origin xyz="${structure_length/2 - cup_radius} ${structure_width/2 - cup_radius} ${cup_height/2 + structure_height/2}" rpy="0 0 0" />
  </joint>

  <!-- ******************************** -->
  <!-- *** Sick_LMS200 Laser Scanner *** -->
  <!-- ******************************** -->
  
  <xacro:include filename="$(find uos_common_urdf)/urdf/sick_lms200.urdf.xacro" />
  <xacro:sick_lms200 laser_link="sick_lms200" gazebo_topic="lms200" />

  <joint name="structure_to_sick_lms200_joint" type="fixed" >
    <parent link="structure" />
    <child link="sick_lms200" />
    <origin xyz="${-base_link_length/2 + structure_length/2 + item_width - 0.015} 0 ${-0.463 + 0.297204}" rpy="0 -0.00809693 0" />
  </joint>

  <!-- ******************************** -->
  <!-- *** gazebo ros camera plugin *** -->
  <!-- ******************************** -->

  <xacro:macro name="webcam" params="camera_name frame_prefix">
    <gazebo reference="${frame_prefix}_link">
      <sensor type="depth" name="${frame_prefix}_sensor">
        <always_on>true</always_on>
        <update_rate>20.0</update_rate>
        <camera>
          <horizontal_fov>1.57</horizontal_fov>
          <image>
            <width>1280</width>
            <height>720</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
        </camera>
        <plugin name="${frame_prefix}_plugin" filename="libgazebo_ros_openni_kinect.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>1.0</updateRate>
          <cameraName>${camera_name}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <depthImageTopicName>/${camera_name}/depth/image_raw</depthImageTopicName>
          <depthImageCameraInfoTopicName>/${camera_name}/depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>/${camera_name}/depth_registered/points</pointCloudTopicName>
          <pointCloudCutoff>0.5</pointCloudCutoff>
          <frameName>${frame_prefix}_optical_link</frameName>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>

<!-- This keeps segfaulting on hydro, use gazebo_ros_camera for now
        <plugin name="${frame_prefix}_plugin" filename="libgazebo_ros_prosilica.so">
          <cameraName>${camera_name}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>${frame_prefix}_optical_link</frameName>
          <CxPrime>1224.5</CxPrime>
          <Cx>1224.5</Cx>
          <Cy>1025.5</Cy>
          <focalLength>772.548512</focalLength> <!- image_width / (2*tan(hfov_radian /2)) ->
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
-->
      </sensor>
      <material value="Gazebo/Black" />
    </gazebo>

    <joint name="${frame_prefix}_pitch_joint" type="revolute">
      <origin xyz="0 0 ${webcam_z_offset}" rpy="0 0 0" />
      <parent link="pole" />
      <child link="${frame_prefix}_pitch_link" />
      <axis xyz="0 1 0"/>
      <limit effort="1000.0" lower="${-M_PI/2}" upper="${M_PI/2}" velocity="2.0"/>
      <dynamics damping="0.1"/>
    </joint>

    <link name="${frame_prefix}_pitch_link">
      <visual>
        <origin rpy="0 0 0" xyz="${webcam_pitch_link_length/2 - item_width/2} 0 -${webcam_pitch_link_height}"/>
        <geometry>
          <box size="${webcam_pitch_link_length} ${webcam_pitch_link_width} ${webcam_pitch_link_height}" />
        </geometry>
        <material name="grey" >
          <color rgba="0.5 0.5 0.5 1" />
        </material>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="${webcam_pitch_link_length/2 - item_width/2} 0 -${webcam_pitch_link_height}"/>
        <geometry>
          <box size="${webcam_pitch_link_length} ${webcam_pitch_link_width} ${webcam_pitch_link_height}" />
        </geometry>
      </collision>
      <xacro:box_inertial_with_origin x="${webcam_pitch_link_length}" y="${webcam_pitch_link_width}" z="${webcam_pitch_link_height}" mass="0.01">
        <origin rpy="0 0 0" xyz="${webcam_pitch_link_length/2 - item_width/2} 0 -${webcam_pitch_link_height}"/>
      </xacro:box_inertial_with_origin>
    </link>

    <joint name="${frame_prefix}_joint" type="fixed">
      <origin xyz="0.06 0.01 -0.04" rpy="0 0 0" />
      <parent link="${frame_prefix}_pitch_link" />
      <child link="${frame_prefix}_link" />
    </joint>

    <link name="${frame_prefix}_link">
      <visual>
        <geometry>
          <box size="0.02 0.085 0.02" />
        </geometry>
        <material name="black" >
          <color rgba="0 0 0 1" />
        </material>
      </visual>
      <collision>
        <geometry>
          <box size="0.02 0.085 0.02" />
        </geometry>
      </collision>
      <xacro:box_inertial x="0.02" y="0.085" z="0.02" mass="0.01"/>
    </link>

    <joint name="${frame_prefix}_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
      <parent link="${frame_prefix}_link" />
      <child link="${frame_prefix}_optical_link" />
    </joint>

    <link name="${frame_prefix}_optical_link" />
  </xacro:macro>

  <xacro:webcam camera_name="vgacam" frame_prefix="webcam" />

  <!-- **************************** -->
  <!-- *** Neuronics Katana Arm *** -->
  <!-- **************************** -->

  <xacro:include filename="$(find katana_description)/urdf/katana_450_6m90a_with_controlbox.urdf.xacro" />

  <link name="katana_pattern"></link>
  <joint name="katana_pattern_joint" type="fixed">
    <parent link="katana_motor4_lift_link"/>
    <child  link="katana_pattern" />
    <origin xyz=".075 -.035 0.00" rpy="1.571 -1.571 0.151"/>
  </joint>

  <property name="baseplate_height" value="0.006" />
  <joint name="calvin_baseplate_controlbox_joint" type="fixed">
    <parent link="structure" />
    <child link="katana_internal_controlbox_link" />
    <origin xyz="0 0 ${baseplate_height*1.5 + 0.2525}" rpy="0 0 0" />
  </joint>

  <!-- ********************************** -->
  <!-- *** Kinect / Xtion RGBD Camera *** -->
  <!-- ********************************** -->

  <link name="kinect_pitch_link">
    <visual>
      <origin xyz="${kinect_pitch_link_length/2 - item_width/2} 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${kinect_pitch_link_length} ${kinect_pitch_link_width} ${kinect_pitch_link_height}" />
      </geometry>
      <material name="grey">
        <color rgba="0.5 0.5 0.5 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="${kinect_pitch_link_length/2 - item_width/2} 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${kinect_pitch_link_length} ${kinect_pitch_link_width} ${kinect_pitch_link_height}" />
      </geometry>
    </collision>
    <xacro:box_inertial_with_origin x="${kinect_pitch_link_length}" y="${kinect_pitch_link_width}" z="${kinect_pitch_link_height}" mass="0.01">
      <origin xyz="${kinect_pitch_link_length/2 - item_width/2} 0 0" rpy="0 0 0"/>
    </xacro:box_inertial_with_origin>
  </link>

  <joint name="kinect_pitch_joint" type="revolute">
    <parent link="pole" />
    <child link="kinect_pitch_link" />
    <origin xyz="0 0 ${kinect_pitch_link_z_offset}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000.0" lower="${-M_PI/2}" upper="${M_PI/2}" velocity="2.0"/>
  </joint>

  <xacro:include filename="$(find uos_common_urdf)/urdf/kinect.urdf.xacro" />
  <xacro:kinect camera="kinect" />

  <joint name="calvin_kinect_joint" type="fixed">
    <parent link="kinect_pitch_link" />
    <child  link="kinect_link" />
    <origin xyz="${kinect_x_offset} ${kinect_y_offset} ${kinect_z_offset}" rpy="${M_PI} 0 0"/>
  </joint>

  <xacro:macro name="kinect_pole_transmission" params="name">
    <transmission name="${name}_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${name}_joint" />
      <actuator name="${name}_motor" >
        <hardwareInterface>EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>

  <xacro:kinect_pole_transmission name="kinect_pitch" />
  <xacro:kinect_pole_transmission name="webcam_pitch" />

  <!-- inertial measurement unit for gazebo -->
  <xacro:imu_gazebo link="imu" imu_topic="imu/data" update_rate="100.0" stdev="${imu_stdev}" />

  <xacro:include filename="$(find sick_tim3xx)/urdf/sick_tim3xx.urdf.xacro" />
  <xacro:sick_tim3xx laser_link="laser" />

  <joint name="laser_mount_joint" type="fixed">
    <!-- 0.264185 is the z-coordinate of the laser scanner measured from the ground
         (wheel_radius - wheel_z_offset + base_link_height / 2.0) is the z-coordinate of base_top
         sick_tim3xx_z_offset is the difference in the z-position between the laser_mount_link and the actual laser scanner -->
    <origin xyz="0.25 0.0035 ${0.264185 - (wheel_radius - wheel_z_offset + base_link_height / 2.0) - sick_tim3xx_z_offset}" rpy="0 -0.0604984 0" />
    <parent link="base_top"/>
    <child link="laser_mount_link" />
  </joint>
</robot>
