<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro"
  xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
  xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller">

  <property name="kinect_x_offset" value="0.06" />
  <property name="kinect_y_offset" value="0.03" />
  <property name="kinect_z_offset" value="0.05" />

  <xacro:property name="pole_length" value="0.02"/>
  <xacro:property name="pole_width" value="0.02"/>
  <xacro:property name="pole_height" value="1"/>

  <xacro:property name="structure_length" value="0.36"/>
  <xacro:property name="structure_width" value="0.32"/>
  <xacro:property name="structure_height" value="0.51"/>

  <xacro:property name="item_width" value="0.02"/>

  <xacro:property name="webcam_pitch_link_length" value="0.082"/>
  <xacro:property name="webcam_pitch_link_width" value="0.095"/>
  <xacro:property name="webcam_pitch_link_height" value="0.02"/>
  <xacro:property name="webcam_z_offset" value="0.315"/>

  <xacro:property name="kinect_pitch_link_length" value="0.08"/>
  <xacro:property name="kinect_pitch_link_width" value="0.17"/>
  <xacro:property name="kinect_pitch_link_height" value="0.02"/>
  <xacro:property name="kinect_pitch_link_z_offset" value="0.46"/>

  <link name="structure">
    <visual>
      <geometry>
        <!--<box size="${structure_length} ${structure_width} ${structure_height}" />-->
        <mesh filename="package://calvin_description/meshes/item-structure.stl"/>
      </geometry>
      <material name="grey" >
        <color rgba="0.5 0.5 0.5 1" />
      </material>
    </visual>
    <collision>
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <!--<box size="${structure_length} ${structure_width} ${structure_height}" />-->
        <mesh filename="package://calvin_description/meshes/item-structure.stl"/>
      </geometry>
    </collision>
    <xacro:box_inertial x="${structure_length}" y="${structure_width}" z="${structure_height}" mass="2"/>
  </link>

  <joint name="top_to_structure" type="fixed">
    <parent link="base_link" />
    <child link="structure" />
    <origin xyz="${base_link_length/2 - structure_length/2 - item_width} 0 ${structure_height/2 + base_link_height/2}" rpy="0 0 0" />
  </joint>

  <link name="imu" />

  <joint name="structure_to_imu_joint" type="fixed">
    <parent link="base_link" />
    <child link="imu" />
    <origin xyz="0 0 0" rpy="${M_PI} 0 ${M_PI}" />
  </joint>

  <link name="pole">
    <visual>
      <geometry>
        <!--<box size="${pole_length} ${pole_width} ${pole_height}" />-->
        <mesh filename="package://calvin_description/meshes/item-pole.stl"/>
      </geometry>
      <material name="grey" >
        <color rgba="0.5 0.5 0.5 1" />
      </material>
    </visual>
    <collision>
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <!--<box size="${pole_length} ${pole_width} ${pole_height}" />-->
        <mesh filename="package://calvin_description/meshes/item-pole.stl"/>
      </geometry>
    </collision>
    <xacro:box_inertial x="${pole_length}" y="${pole_width}" z="${pole_height}" mass="0.25"/>
  </link>

  <joint name="structure_to_pole_joint" type="fixed">
    <parent link="structure" />
    <child link="pole" />
    <origin xyz="${-structure_length/2 - pole_length/2} 0 ${pole_height/2 + structure_height/2}" rpy="0 0 0" />
  </joint>

  <!-- ******************************** -->
  <!-- *** gazebo ros camera plugin *** -->
  <!-- ******************************** -->

  <xacro:macro name="webcam" params="">
    <gazebo reference="webcam">
      <sensor:camera name="webcam">
        <imageFormat>L8</imageFormat>
        <imageSize>640 480</imageSize>
        <hfov>57</hfov>
        <nearClip>0.01</nearClip>
        <farClip>5</farClip>
        <updateRate>1.0</updateRate>
        <baseline>0.2</baseline>
        <controller:gazebo_ros_camera name="webcam_controller" plugin="libgazebo_ros_camera.so">
          <robotNamespace>webcam</robotNamespace>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <cameraName>webcam</cameraName>
          <frameName>/world</frameName>
          <updateRate>1</updateRate>
          <CxPrime>10</CxPrime>
          <Cx>10</Cx>
          <Cy>10</Cy>
          <focalLength>10</focalLength>
          <hackBaseline>10</hackBaseline>
          <distortionK1>0</distortionK1>
          <distortionK2>0</distortionK2>
          <distortionK3>0</distortionK3>
          <distortionT1>0</distortionT1>
          <distortionT2>0</distortionT2>
        </controller:gazebo_ros_camera>
      </sensor:camera>
      <material value="Gazebo/Gray" />
    </gazebo>
    <link name="webcam_pitch_link">
      <visual>
        <origin rpy="0 0 0" xyz="${webcam_pitch_link_length/2 - item_width/2} 0 -${webcam_pitch_link_height}"/>
        <geometry>
          <box size="${webcam_pitch_link_length} ${webcam_pitch_link_width} ${webcam_pitch_link_height}" />
        </geometry>
        <material name="grey" >
          <color rgba="0.5 0.5 0.5 1" />
        </material>
      </visual>
      <collision>
        <geometry>
          <box size="${webcam_pitch_link_length} ${webcam_pitch_link_width} ${webcam_pitch_link_height}" />
        </geometry>
      </collision>
      <xacro:box_inertial x="${webcam_pitch_link_length}" y="${webcam_pitch_link_width}" z="${webcam_pitch_link_height}" mass="0.01"/>
    </link>
    <joint name="webcam_pitch_joint" type="revolute">
      <origin xyz="0 0 ${webcam_z_offset}" rpy="0 0 0" />
      <parent link="pole" />
      <child link="webcam_pitch_link" />
      <axis xyz="0 1 0"/>
      <limit effort="1000.0" lower="${-M_PI/2}" upper="${M_PI/2}" velocity="2.0"/>
    </joint>
    <link name="webcam_link">
      <visual>
        <geometry>
          <box size="0.02 0.085 0.02" />
        </geometry>
        <material name="black" >
          <color rgba="0 0 0 1" />
        </material>
      </visual>
      <collision>
        <geometry>
          <box size="0.02 0.085 0.02" />
        </geometry>
      </collision>
      <xacro:box_inertial x="0.1" y="0.1" z="0.1" mass="0.01"/>
    </link>
    <joint name="webcam_joint" type="fixed">
      <origin xyz="0.06 0 -0.04" rpy="0 0 0" />
      <parent link="webcam_pitch_link" />
      <child link="webcam_link" />
    </joint>
    <link name="webcam_optical_link">
      <xacro:box_inertial x="0.1" y="0.1" z="0.1" mass="0.01"/>
    </link>
    <joint name="webcam_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
      <parent link="webcam_link" />
      <child link="webcam_optical_link" />
    </joint>
  </xacro:macro>
  <xacro:webcam/>

  <!-- **************************** -->
  <!-- *** Neuronics Katana Arm *** -->
  <!-- **************************** -->

  <include filename="$(find katana_description)/urdf/katana_450_6m90a_with_controlbox.urdf.xacro" />

  <link name="katana_pattern"></link>
  <joint name="katana_pattern_joint" type="fixed">
    <parent link="katana_motor4_lift_link"/>
    <child  link="katana_pattern" />
    <origin xyz=".075 -.035 0.00" rpy="1.571 -1.571 0.151"/>
  </joint>

  <property name="baseplate_height" value="0.006" />
  <joint name="kurtana_baseplate_controlbox_joint" type="fixed">
    <parent link="structure" />
    <child link="katana_internal_controlbox_link" />
    <origin xyz="0 0 ${baseplate_height*1.5 + 0.2525}" rpy="0 0 0" />
  </joint>

  <!-- ********************************** -->
  <!-- *** Kinect / Xtion RGBD Camera *** -->
  <!-- ********************************** -->

  <link name="kinect_pitch_link">
    <visual>
      <origin xyz="${kinect_pitch_link_length/2 - item_width/2} 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${kinect_pitch_link_length} ${kinect_pitch_link_width} ${kinect_pitch_link_height}" />
      </geometry>
      <material name="grey">
        <color rgba="0.5 0.5 0.5 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="${kinect_pitch_link_length/2 - item_width/2} 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${kinect_pitch_link_length} ${kinect_pitch_link_width} ${kinect_pitch_link_height}" />
      </geometry>
    </collision>
    <xacro:box_inertial x="${kinect_pitch_link_length}" y="${kinect_pitch_link_width}" z="${kinect_pitch_link_height}" mass="0.01"/>
  </link>

  <joint name="kinect_pitch_joint" type="revolute">
    <parent link="pole" />
    <child link="kinect_pitch_link" />
    <origin xyz="0 0 ${kinect_pitch_link_z_offset}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000.0" lower="${-M_PI/2}" upper="${M_PI/2}" velocity="2.0"/>
  </joint>

  <include filename="$(find uos_common_urdf)/urdf/kinect.urdf.xacro" />
  <xacro:kinect camera="kinect" />

  <joint name="calvin_kinect_joint" type="fixed">
    <parent link="kinect_pitch_link" />
    <child  link="kinect_link" />
    <origin xyz="${kinect_x_offset} ${kinect_y_offset} ${kinect_z_offset}" rpy="0 0 0"/>
  </joint>

  <xacro:macro name="kinect_pole_transmission" params="name">
    <transmission name="${name}_trans" type="pr2_mechanism_model/SimpleTransmission">
      <actuator name="${name}_motor" />
      <joint name="${name}_joint" />
      <mechanicalReduction>1</mechanicalReduction>
      <motorTorqueConstant>1</motorTorqueConstant>
    </transmission>
  </xacro:macro>

  <xacro:kinect_pole_transmission name="kinect_pitch" />
  <xacro:kinect_pole_transmission name="webcam_pitch" />
</robot>
